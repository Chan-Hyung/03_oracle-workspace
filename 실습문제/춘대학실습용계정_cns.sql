------------------------------SELECT-----------------------------------------
-- 1
SELECT DEPARTMENT_NAME AS "학과명", CATEGORY AS "계열"
FROM TB_DEPARTMENT;

-- 2 CAPACITY
SELECT CAPACITY AS "학과별 정원"
FROM TB_DEPARTMENT;

-- 3 
--SELECT STUDENT_NAME
--FROM TB_STUDENT
--JOIN TB_DEPARTMENT ON (DEPARTMENT_NAME = DEPARTMENT_NO)
--WHERE SUBSTR(STUDENT_SSN, 8, 1) IN ('2', '4') AND ABSENCE_YN = 'Y';
SELECT STUDENT_NAME
FROM TB_DEPARTMENT D, TB_STUDENT S
WHERE D.DEPARTMENT_NO = S.DEPARTMENT_NO
AND D.DEPARTMENT_NO = '001'
AND S.ABSENCE_YN = 'Y'
AND SUBSTR(S.STUDENT_SSN, 8, 1) = 2;

-- 4 
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NO DESC;
      
-- 5
SELECT DEPARTMENT_NAME, CAPACITY
FROM TB_DEPARTMENT
WHERE CAPACITY >= 20 AND CAPACITY <=30;

-- 6
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

-- 7
SELECT DEPARTMENT_NO
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

-- 8
SELECT PREATTENDING_CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

-- 9
SELECT DISTINCT(CATEGORY)
FROM TB_DEPARTMENT;

-- 10
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ENTRANCE_DATE LIKE '02%' AND STUDENT_ADDRESS LIKE '전주시%' AND ABSENCE_YN = 'Y';

--------------------- 함수---------------------------------------------------------------------------

-- 1
SELECT STUDENT_NO AS "학번", STUDENT_NAME AS "이름", ENTRANCE_DATE AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO= '002';

-- 2
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';

-- 3 나이계산?
SELECT PROFESSOR_NAME AS "교수이름",  
        MONTHS_BETWEEN(SYSDATE, TO_DATE(
        CASE 
        WHEN SUBSTR(PROFESSOR_SSN, 1,2) THEN 2025 - (1900 + CAST(SUBSTR(professor_ssn, 1, 2))
        ELSE 2025 - (200- + CAST(SUBSTR(professor_ssn,1,2))) AS "나이"
FROM TB_PROFESSOR
ORDER BY PROFESSOR_SSN DESC;

-- 4
SELECT SUBSTR(PROFESSOR_NAME, 2, 2) AS "이름"
FROM TB_PROFESSOR;

-- 5 입학 연도 계산
--SELECT SUBSTR(STUDENT_NO, 1, 2)+19, STUDENT_NAME 
--FROM TB_STUDENT
--WHERE SUBSTR(STUDENT_NO, 1, 2)+19 < 

-- 6
SELECT TO_CHAR(TO_DATE('20201225', 'YYYYMMDD'), 'DAY') FROM DUAL;
  --   TO_CHAR(HIRE_DATE, 'YYYY"년" MM"월" DD"일"')

-- 7
SELECT TO_DATE('99/10/11','YY/MM/DD'), -- YY는 무조건 현재년도를 의미하여 2099년이다.
       TO_DATE('49/10/11','YY/MM/DD'), -- YY는 무조건 현재년도를 의미하여 2049년이다.
       TO_DATE('99/10/11','RR/MM/DD'), -- RR 위치에있는 숫자가 50이상이라서 현시점보다 이전년도인 1999년을 의미하고
       TO_DATE('49/10/11','RR/MM/DD') -- RR위치에 있는 숫자가 50이하라서 2049(현시점) 년도를 의미한다.
FROM DUAL;

-- 8
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) < 2000;

-- 9
SELECT ROUND(POINT, 3) AS "평점"
FROM TB_GRADE G, TB_STUDENT S
WHERE S.STUDENT_NO = G.STUDENT_NO AND 
      S.STUDENT_NO = 'A517178';
      
-- 10 학생 수?
--SELECT DEPARTMENT_NO AS "학과 번호", 

-- 11
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

-- 12


-- 13
SELECT DEPARTMENT_NO AS "학과코드명", COUNT(*) AS "휴학생 수"
FROM TB_STUDENT 
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO ASC;

-- 14
SELECT STUDENT_NAME AS "동일이름", COUNT(*) AS"동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*)>1
ORDER BY STUDENT_NAME;

-- 15 A112113
--SELECT 

------------------------------------------------------------------------------






-------------------------------------------------------------------------------------









----------------------------------------------------------------------------------------
--GRANT CREATE VIEW TO cns;







-- 10
CREATE OR REPLACE VIEW VW_학생일반정보
AS SELECT STUDENT_NO,STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT;

SELECT * FROM VW_학생일반정보;

-- 11 STUDENT_NAME / DEPARTMENT_NAME / PROFESSOR_NAME

CREATE OR REPLACE VIEW VW_지도면담
AS (SELECT STUDENT_NAME,DEPARTMENT_NAME, PROFESSOR_NAME
    FROM TB_STUDENT S
    JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = S.DEPARTMENT_NO)
    JOIN TB_PROFESSOR P ON (P.PROFESSOR_NO = S.COACH_PROFESSOR_NO))
    
SELECT * FROM VW_지도면담;
ROLLBACK;

-- 12 DEPARTMENT_NO / CAPACITY
CREATE OR REPLACE VIEW VW_학과별학생수
AS (SELECT DEPARTMENT_NAME, CAPACITY
    FROM TB_DEPARTMENT D
    JOIN TB_STUDENT S ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO));
    
    
SELECT * FROM VW_학과별학생수;

-- 13 STUDENT_NO
SELECT * FROM TB_STUDENT
UPDATE TB_STUDENT
    SET STUDENT_NAME = '박찬형'
WHERE STUDENT_NO = 'A213046';

CREATE OR REPLACE VIEW VW_나
AS SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT;

SELECT STUDENT_NO, STUDENT_NAME 
FROM VW_나
WHERE STUDENT_NO = 'A213046' AND STUDENT_NAME = '박찬형';

ROLLBACK;

SELECT * FROM TB_STUDENT;
UPDATE TB_STUDENT
    SET STUDENT_NAME = '서가람'
WHERE STUDENT_NO = 'A213046';

-- 14
CREATE OR REPLACE VIEW VW_나
AS SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WITH READ ONLY;

SELECT * FROM VW_나;

-- 15 TB_DEPARTMENT = DEPARTMENT_NAME / CAPACITY / TB_CLASS = CLASS_NO
-- 조건 추가 => 최근 3 년을 기준으로 수강인원이 가장 맋았던 3 과목을 찾는 구문을 (DISTINCT 이게 필요없음)
SELECT DISTINCT CLASS_NO, DEPARTMENT_NAME, CAPACITY
FROM TB_DEPARTMENT D
JOIN TB_CLASS C ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
ORDER BY CAPACITY DESC;
--------------------------------------------------------------------------------------
-- 1
SELECT STUDENT_NAME AS "학생 이름", STUDENT_ADDRESS AS "주소지"
FROM TB_STUDENT
ORDER BY student_name ASC;

-- 2
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;

-- 3
--SELECT STUDENT_NAME AS "학생 이름", STUDENT_NO AS "학번", STUDENT_ADDRESS AS "거주지 주소"
SELECT STUDENT_NAME AS "학생 이름", STUDENT_NO AS "학번", STUDENT_ADDRESS AS "거주지 주소"
FROM TB_STUDENT 
WHERE (STUDENT_ADDRESS LIKE "강원도%" OR STUDENT_ADDRESS LIKE "경기도%") AND SUBSTR(STUDENT_SSN, 8, 1) IN ('1', '2');

-- 4
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR P
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = P.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NO = '005'
ORDER BY PROFESSOR_SSN ASC;

-- 5
SELECT G.STUDENT_NO, POINT
FROM TB_GRADE G
JOIN TB_STUDENT S ON (G.STUDENT_NO = S.STUDENT_NO)
JOIN TB_CLASS C ON (C.CLASS_NO = G.CLASS_NO)
WHERE C.CLASS_NO = 'C3118100' AND TEAM_NO = '200402'
ORDER BY POINT DESC, S.STUDENT_NO ASC;

-- 6
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = S.DEPARTMENT_NO)
ORDER BY STUDENT_NAME ASC;

-- 7
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = C.DEPARTMENT_NO);

-- 8
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_PROFESSOR P
JOIN TB_CLASS C ON (C.DEPARTMENT_NO = P.DEPARTMENT_NO);

-- 9
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_PROFESSOR P
JOIN TB_CLASS C ON (C.DEPARTMENT_NO = P.DEPARTMENT_NO)
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = P.DEPARTMENT_NO)
WHERE CATEGORY = '인문사회';

-- 10
SELECT S.STUDENT_NO AS "학번", S.STUDENT_NAME AS "학생 이름", ROUND(AVG(G.POINT), 1)
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = S.DEPARTMENT_NO)
JOIN TB_GRADE G ON (G.STUDENT_NO = S.STUDENT_NO)
WHERE DEPARTMENT_NAME = '음악학과'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME;

-- 11
SELECT DEPARTMENT_NAME AS "학과 이름", STUDENT_NAME AS "학생 이름", PROFESSOR_NAME AS "지도교수이름"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = S.DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON (P.PROFESSOR_NO = S.COACH_PROFESSOR_NO)
WHERE DEPARTMENT_NAME = '경제학과'
    AND STUDENT_NAME = '손건영'
    AND PROFESSOR_NAME = '박태환';
    
-- 12
SELECT STUDENT_NAME, TERM_NO
FROM TB_STUDENT S
JOIN TB_GRADE G ON (G.STUDENT_NO = S.STUDENT_NO)
WHERE /*????*/ = '인간관계론';

-- 13
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = C.DEPARTMENT_NO)
WHERE CATEGORY = '예체능'
    AND PREATTENDING_CLASS_NO IS NULL;
    
-- 14
SELECT S.STUDENT_NAME AS "학생이름", NVL(P.PROFESSOR_NAME, '지도교수 미지정') AS "지도교수"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D 
    ON D.DEPARTMENT_NO = S.DEPARTMENT_NO
LEFT JOIN TB_PROFESSOR P 
    ON P.COACH_PROFESSOR_NO = S.PROFESSOR_NO
WHERE D.DEPARTMENT_NAME = '서반아어학과'
ORDER BY S.STUDENT_NO DESC;

-- 15
SELECT S.STUDENT_NO AS "학번", S.STUDENT_NAME AS "이름", D.DEPARTMENT_NAME AS "학과 이름", ROUND(AVG(G.POINT), 1) AS "평점"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D 
    ON S.DEPARTMENT_NO = D.DEPARTMENT_NO
JOIN TB_GRADE G 
    ON S.STUDENT_NO = G.STUDENT_NO
WHERE S.ABSENCE_YN = 'N'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME
HAVING AVG(G.POINT) >= 4.0;

-- 16
SELECT C.CLASS_NO, C.CLASS_NAME, ROUND(AVG(G.POINT), 1)
FROM TB_CLASS C
JOIN TB_DEPARTMENT D 
    ON D.DEPARTMENT_NO = C.DEPARTMENT_NO
JOIN TB_GRADE G 
    ON G.CLASS_NO = C.CLASS_NO
WHERE D.DEPARTMENT_NAME = '환경조경학과'
  AND C.CLASS_TYPE = '전공'
GROUP BY C.CLASS_NO, CLASS_NAME;

-- 17

